/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SubscriptionServiceInterface extends utils.Interface {
  functions: {
    "addressSubscriptions(address,address)": FunctionFragment;
    "admins(address)": FunctionFragment;
    "charge(uint256[])": FunctionFragment;
    "check(uint256,uint256)": FunctionFragment;
    "removeService(address)": FunctionFragment;
    "serviceFees(address,address)": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "setService(address,uint256)": FunctionFragment;
    "setSubBlocks(uint256)": FunctionFragment;
    "setSupportedToken(address,uint256)": FunctionFragment;
    "subBlocks()": FunctionFragment;
    "subscribe(address,address)": FunctionFragment;
    "subscriptions(uint256)": FunctionFragment;
    "supportedTokens(address)": FunctionFragment;
    "totalSubscriptions()": FunctionFragment;
    "unsubscribe(uint256)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
    "withdrawETH(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressSubscriptions"
      | "admins"
      | "charge"
      | "check"
      | "removeService"
      | "serviceFees"
      | "setAdmin"
      | "setService"
      | "setSubBlocks"
      | "setSupportedToken"
      | "subBlocks"
      | "subscribe"
      | "subscriptions"
      | "supportedTokens"
      | "totalSubscriptions"
      | "unsubscribe"
      | "withdraw"
      | "withdrawETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressSubscriptions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "charge",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "check",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeService",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFees",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setService",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubBlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "subBlocks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSubscriptions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "charge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setService", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSubBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subBlocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "ChargeFailed(address,address,address,uint256)": EventFragment;
    "Charged(address,address,address,uint256)": EventFragment;
    "NewSubscription(address,address,address,uint256)": EventFragment;
    "ServiceRemoved(address,address)": EventFragment;
    "ServiceSet(address,address,uint256)": EventFragment;
    "Unsubscribe(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChargeFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Charged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unsubscribe"): EventFragment;
}

export interface ChargeFailedEventObject {
  subscriber: string;
  service: string;
  token: string;
  value: BigNumber;
}
export type ChargeFailedEvent = TypedEvent<
  [string, string, string, BigNumber],
  ChargeFailedEventObject
>;

export type ChargeFailedEventFilter = TypedEventFilter<ChargeFailedEvent>;

export interface ChargedEventObject {
  subscriber: string;
  service: string;
  token: string;
  value: BigNumber;
}
export type ChargedEvent = TypedEvent<
  [string, string, string, BigNumber],
  ChargedEventObject
>;

export type ChargedEventFilter = TypedEventFilter<ChargedEvent>;

export interface NewSubscriptionEventObject {
  subscriber: string;
  service: string;
  token: string;
  subId: BigNumber;
}
export type NewSubscriptionEvent = TypedEvent<
  [string, string, string, BigNumber],
  NewSubscriptionEventObject
>;

export type NewSubscriptionEventFilter = TypedEventFilter<NewSubscriptionEvent>;

export interface ServiceRemovedEventObject {
  serviceProvider: string;
  token: string;
}
export type ServiceRemovedEvent = TypedEvent<
  [string, string],
  ServiceRemovedEventObject
>;

export type ServiceRemovedEventFilter = TypedEventFilter<ServiceRemovedEvent>;

export interface ServiceSetEventObject {
  serviceProvider: string;
  token: string;
  subFee: BigNumber;
}
export type ServiceSetEvent = TypedEvent<
  [string, string, BigNumber],
  ServiceSetEventObject
>;

export type ServiceSetEventFilter = TypedEventFilter<ServiceSetEvent>;

export interface UnsubscribeEventObject {
  subscriber: string;
  service: string;
  token: string;
  subId: BigNumber;
}
export type UnsubscribeEvent = TypedEvent<
  [string, string, string, BigNumber],
  UnsubscribeEventObject
>;

export type UnsubscribeEventFilter = TypedEventFilter<UnsubscribeEvent>;

export interface SubscriptionService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionServiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressSubscriptions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    charge(
      subscribers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    check(
      indexFrom: PromiseOrValue<BigNumberish>,
      indexTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { expiredSubs: BigNumber[] }>;

    removeService(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    serviceFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAdmin(
      admin: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setService(
      token: PromiseOrValue<string>,
      subFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSubBlocks(
      newSubBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSupportedToken(
      token: PromiseOrValue<string>,
      serviceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    subscribe(
      service: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        nextChargeBlock: BigNumber;
        service: string;
        subscriber: string;
        token: string;
      }
    >;

    supportedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSubscriptions(overrides?: CallOverrides): Promise<[BigNumber]>;

    unsubscribe(
      subId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addressSubscriptions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  admins(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  charge(
    subscribers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  check(
    indexFrom: PromiseOrValue<BigNumberish>,
    indexTo: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  removeService(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  serviceFees(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAdmin(
    admin: PromiseOrValue<string>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setService(
    token: PromiseOrValue<string>,
    subFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSubBlocks(
    newSubBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSupportedToken(
    token: PromiseOrValue<string>,
    serviceFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  subscribe(
    service: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string] & {
      nextChargeBlock: BigNumber;
      service: string;
      subscriber: string;
      token: string;
    }
  >;

  supportedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSubscriptions(overrides?: CallOverrides): Promise<BigNumber>;

  unsubscribe(
    subId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressSubscriptions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    charge(
      subscribers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    check(
      indexFrom: PromiseOrValue<BigNumberish>,
      indexTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    removeService(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    serviceFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      admin: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setService(
      token: PromiseOrValue<string>,
      subFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubBlocks(
      newSubBlocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportedToken(
      token: PromiseOrValue<string>,
      serviceFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    subscribe(
      service: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        nextChargeBlock: BigNumber;
        service: string;
        subscriber: string;
        token: string;
      }
    >;

    supportedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSubscriptions(overrides?: CallOverrides): Promise<BigNumber>;

    unsubscribe(
      subId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChargeFailed(address,address,address,uint256)"(
      subscriber?: PromiseOrValue<string> | null,
      service?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      value?: null
    ): ChargeFailedEventFilter;
    ChargeFailed(
      subscriber?: PromiseOrValue<string> | null,
      service?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      value?: null
    ): ChargeFailedEventFilter;

    "Charged(address,address,address,uint256)"(
      subscriber?: PromiseOrValue<string> | null,
      service?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      value?: null
    ): ChargedEventFilter;
    Charged(
      subscriber?: PromiseOrValue<string> | null,
      service?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      value?: null
    ): ChargedEventFilter;

    "NewSubscription(address,address,address,uint256)"(
      subscriber?: PromiseOrValue<string> | null,
      service?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      subId?: null
    ): NewSubscriptionEventFilter;
    NewSubscription(
      subscriber?: PromiseOrValue<string> | null,
      service?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      subId?: null
    ): NewSubscriptionEventFilter;

    "ServiceRemoved(address,address)"(
      serviceProvider?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): ServiceRemovedEventFilter;
    ServiceRemoved(
      serviceProvider?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): ServiceRemovedEventFilter;

    "ServiceSet(address,address,uint256)"(
      serviceProvider?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      subFee?: null
    ): ServiceSetEventFilter;
    ServiceSet(
      serviceProvider?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      subFee?: null
    ): ServiceSetEventFilter;

    "Unsubscribe(address,address,address,uint256)"(
      subscriber?: PromiseOrValue<string> | null,
      service?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      subId?: null
    ): UnsubscribeEventFilter;
    Unsubscribe(
      subscriber?: PromiseOrValue<string> | null,
      service?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      subId?: null
    ): UnsubscribeEventFilter;
  };

  estimateGas: {
    addressSubscriptions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    charge(
      subscribers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    check(
      indexFrom: PromiseOrValue<BigNumberish>,
      indexTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeService(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    serviceFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      admin: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setService(
      token: PromiseOrValue<string>,
      subFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSubBlocks(
      newSubBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSupportedToken(
      token: PromiseOrValue<string>,
      serviceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    subscribe(
      service: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSubscriptions(overrides?: CallOverrides): Promise<BigNumber>;

    unsubscribe(
      subId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressSubscriptions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    charge(
      subscribers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    check(
      indexFrom: PromiseOrValue<BigNumberish>,
      indexTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeService(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    serviceFees(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      admin: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setService(
      token: PromiseOrValue<string>,
      subFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSubBlocks(
      newSubBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSupportedToken(
      token: PromiseOrValue<string>,
      serviceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subscribe(
      service: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSubscriptions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsubscribe(
      subId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
