/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPaymaster {
  export type GasAndDataLimitsStruct = {
    acceptanceBudget: PromiseOrValue<BigNumberish>;
    preRelayedCallGasLimit: PromiseOrValue<BigNumberish>;
    postRelayedCallGasLimit: PromiseOrValue<BigNumberish>;
    calldataSizeLimit: PromiseOrValue<BigNumberish>;
  };

  export type GasAndDataLimitsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    acceptanceBudget: BigNumber;
    preRelayedCallGasLimit: BigNumber;
    postRelayedCallGasLimit: BigNumber;
    calldataSizeLimit: BigNumber;
  };
}

export declare namespace GsnTypes {
  export type RelayDataStruct = {
    maxFeePerGas: PromiseOrValue<BigNumberish>;
    maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;
    transactionCalldataGasUsed: PromiseOrValue<BigNumberish>;
    relayWorker: PromiseOrValue<string>;
    paymaster: PromiseOrValue<string>;
    forwarder: PromiseOrValue<string>;
    paymasterData: PromiseOrValue<BytesLike>;
    clientId: PromiseOrValue<BigNumberish>;
  };

  export type RelayDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    maxFeePerGas: BigNumber;
    maxPriorityFeePerGas: BigNumber;
    transactionCalldataGasUsed: BigNumber;
    relayWorker: string;
    paymaster: string;
    forwarder: string;
    paymasterData: string;
    clientId: BigNumber;
  };

  export type RelayRequestStruct = {
    request: IForwarder.ForwardRequestStruct;
    relayData: GsnTypes.RelayDataStruct;
  };

  export type RelayRequestStructOutput = [
    IForwarder.ForwardRequestStructOutput,
    GsnTypes.RelayDataStructOutput
  ] & {
    request: IForwarder.ForwardRequestStructOutput;
    relayData: GsnTypes.RelayDataStructOutput;
  };
}

export declare namespace IForwarder {
  export type ForwardRequestStruct = {
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    gas: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    validUntilTime: PromiseOrValue<BigNumberish>;
  };

  export type ForwardRequestStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    from: string;
    to: string;
    value: BigNumber;
    gas: BigNumber;
    nonce: BigNumber;
    data: string;
    validUntilTime: BigNumber;
  };
}

export interface GasaltPaymasterInterface extends utils.Interface {
  functions: {
    "CALLDATA_SIZE_LIMIT()": FunctionFragment;
    "FORWARDER_HUB_OVERHEAD()": FunctionFragment;
    "PAYMASTER_ACCEPTANCE_BUDGET()": FunctionFragment;
    "POST_RELAYED_CALL_GAS_LIMIT()": FunctionFragment;
    "PRE_RELAYED_CALL_GAS_LIMIT()": FunctionFragment;
    "deposit()": FunctionFragment;
    "getDataSigner()": FunctionFragment;
    "getGasAndDataLimits()": FunctionFragment;
    "getQuote(address,uint24,address,address,uint128,uint32)": FunctionFragment;
    "getRelayHub()": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "getUniswapParams()": FunctionFragment;
    "getWalletFactory()": FunctionFragment;
    "owner()": FunctionFragment;
    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": FunctionFragment;
    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBlacklistedToken(address,bool)": FunctionFragment;
    "setDataSigner(address)": FunctionFragment;
    "setGeneralFee(uint256)": FunctionFragment;
    "setRelayHub(address)": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "setUniswapParams(address,uint24,address,uint32)": FunctionFragment;
    "setVerifiedContract(address,bool)": FunctionFragment;
    "setVerifiedContractFee(uint256)": FunctionFragment;
    "setWalletFactory(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "versionPaymaster()": FunctionFragment;
    "withdrawRelayHubDepositTo(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CALLDATA_SIZE_LIMIT"
      | "FORWARDER_HUB_OVERHEAD"
      | "PAYMASTER_ACCEPTANCE_BUDGET"
      | "POST_RELAYED_CALL_GAS_LIMIT"
      | "PRE_RELAYED_CALL_GAS_LIMIT"
      | "deposit"
      | "getDataSigner"
      | "getGasAndDataLimits"
      | "getQuote"
      | "getRelayHub"
      | "getTrustedForwarder"
      | "getUniswapParams"
      | "getWalletFactory"
      | "owner"
      | "postRelayedCall"
      | "preRelayedCall"
      | "renounceOwnership"
      | "setBlacklistedToken"
      | "setDataSigner"
      | "setGeneralFee"
      | "setRelayHub"
      | "setTrustedForwarder"
      | "setUniswapParams"
      | "setVerifiedContract"
      | "setVerifiedContractFee"
      | "setWalletFactory"
      | "supportsInterface"
      | "transferOwnership"
      | "versionPaymaster"
      | "withdrawRelayHubDepositTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CALLDATA_SIZE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FORWARDER_HUB_OVERHEAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMASTER_ACCEPTANCE_BUDGET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POST_RELAYED_CALL_GAS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRE_RELAYED_CALL_GAS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDataSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasAndDataLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayHub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      GsnTypes.RelayDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [
      GsnTypes.RelayRequestStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBlacklistedToken",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGeneralFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayHub",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapParams",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifiedContract",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifiedContractFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "versionPaymaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRelayHubDepositTo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CALLDATA_SIZE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FORWARDER_HUB_OVERHEAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMASTER_ACCEPTANCE_BUDGET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POST_RELAYED_CALL_GAS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRE_RELAYED_CALL_GAS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDataSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasAndDataLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRelayHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGeneralFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifiedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifiedContractFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionPaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRelayHubDepositTo",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetGeneralFee(uint256)": EventFragment;
    "SetSigner(address,address)": EventFragment;
    "SetVerifiedContractFee(uint256)": EventFragment;
    "SetWalletFactory(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGeneralFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVerifiedContractFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWalletFactory"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetGeneralFeeEventObject {
  generalFee: BigNumber;
}
export type SetGeneralFeeEvent = TypedEvent<
  [BigNumber],
  SetGeneralFeeEventObject
>;

export type SetGeneralFeeEventFilter = TypedEventFilter<SetGeneralFeeEvent>;

export interface SetSignerEventObject {
  signer: string;
  owner: string;
}
export type SetSignerEvent = TypedEvent<[string, string], SetSignerEventObject>;

export type SetSignerEventFilter = TypedEventFilter<SetSignerEvent>;

export interface SetVerifiedContractFeeEventObject {
  verifiedContractfee: BigNumber;
}
export type SetVerifiedContractFeeEvent = TypedEvent<
  [BigNumber],
  SetVerifiedContractFeeEventObject
>;

export type SetVerifiedContractFeeEventFilter =
  TypedEventFilter<SetVerifiedContractFeeEvent>;

export interface SetWalletFactoryEventObject {
  walletFactory: string;
  owner: string;
}
export type SetWalletFactoryEvent = TypedEvent<
  [string, string],
  SetWalletFactoryEventObject
>;

export type SetWalletFactoryEventFilter =
  TypedEventFilter<SetWalletFactoryEvent>;

export interface GasaltPaymaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GasaltPaymasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAYMASTER_ACCEPTANCE_BUDGET(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    POST_RELAYED_CALL_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDataSigner(overrides?: CallOverrides): Promise<[string]>;

    getGasAndDataLimits(
      overrides?: CallOverrides
    ): Promise<
      [IPaymaster.GasAndDataLimitsStructOutput] & {
        limits: IPaymaster.GasAndDataLimitsStructOutput;
      }
    >;

    getQuote(
      factory: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    getRelayHub(overrides?: CallOverrides): Promise<[string]>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    getUniswapParams(
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, number] & {
        uniswapV3Factory: string;
        uniswapV3Fee: number;
        weth: string;
        uniswapV3SecondsAgo: number;
      }
    >;

    getWalletFactory(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    postRelayedCall(
      context: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      gasUseWithoutPost: PromiseOrValue<BigNumberish>,
      relayData: GsnTypes.RelayDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    preRelayedCall(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: PromiseOrValue<BytesLike>,
      approvalData: PromiseOrValue<BytesLike>,
      maxPossibleGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlacklistedToken(
      token: PromiseOrValue<string>,
      isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDataSigner(
      dataSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGeneralFee(
      generalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRelayHub(
      hub: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUniswapParams(
      uniswapV3Factory: PromiseOrValue<string>,
      uniswapV3Fee: PromiseOrValue<BigNumberish>,
      weth: PromiseOrValue<string>,
      uniswapV3SecondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVerifiedContract(
      contractAddress: PromiseOrValue<string>,
      isVerified: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVerifiedContractFee(
      verifiedContractfee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWalletFactory(
      walletFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    versionPaymaster(overrides?: CallOverrides): Promise<[string]>;

    withdrawRelayHubDepositTo(
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

  PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;

  POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDataSigner(overrides?: CallOverrides): Promise<string>;

  getGasAndDataLimits(
    overrides?: CallOverrides
  ): Promise<IPaymaster.GasAndDataLimitsStructOutput>;

  getQuote(
    factory: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    secondsAgo: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRelayHub(overrides?: CallOverrides): Promise<string>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  getUniswapParams(
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, number] & {
      uniswapV3Factory: string;
      uniswapV3Fee: number;
      weth: string;
      uniswapV3SecondsAgo: number;
    }
  >;

  getWalletFactory(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  postRelayedCall(
    context: PromiseOrValue<BytesLike>,
    success: PromiseOrValue<boolean>,
    gasUseWithoutPost: PromiseOrValue<BigNumberish>,
    relayData: GsnTypes.RelayDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  preRelayedCall(
    relayRequest: GsnTypes.RelayRequestStruct,
    signature: PromiseOrValue<BytesLike>,
    approvalData: PromiseOrValue<BytesLike>,
    maxPossibleGas: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlacklistedToken(
    token: PromiseOrValue<string>,
    isBlacklisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDataSigner(
    dataSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGeneralFee(
    generalFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRelayHub(
    hub: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUniswapParams(
    uniswapV3Factory: PromiseOrValue<string>,
    uniswapV3Fee: PromiseOrValue<BigNumberish>,
    weth: PromiseOrValue<string>,
    uniswapV3SecondsAgo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVerifiedContract(
    contractAddress: PromiseOrValue<string>,
    isVerified: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVerifiedContractFee(
    verifiedContractfee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWalletFactory(
    walletFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  versionPaymaster(overrides?: CallOverrides): Promise<string>;

  withdrawRelayHubDepositTo(
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;

    POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: CallOverrides): Promise<void>;

    getDataSigner(overrides?: CallOverrides): Promise<string>;

    getGasAndDataLimits(
      overrides?: CallOverrides
    ): Promise<IPaymaster.GasAndDataLimitsStructOutput>;

    getQuote(
      factory: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelayHub(overrides?: CallOverrides): Promise<string>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    getUniswapParams(
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, number] & {
        uniswapV3Factory: string;
        uniswapV3Fee: number;
        weth: string;
        uniswapV3SecondsAgo: number;
      }
    >;

    getWalletFactory(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    postRelayedCall(
      context: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      gasUseWithoutPost: PromiseOrValue<BigNumberish>,
      relayData: GsnTypes.RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    preRelayedCall(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: PromiseOrValue<BytesLike>,
      approvalData: PromiseOrValue<BytesLike>,
      maxPossibleGas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBlacklistedToken(
      token: PromiseOrValue<string>,
      isBlacklisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDataSigner(
      dataSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGeneralFee(
      generalFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayHub(
      hub: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniswapParams(
      uniswapV3Factory: PromiseOrValue<string>,
      uniswapV3Fee: PromiseOrValue<BigNumberish>,
      weth: PromiseOrValue<string>,
      uniswapV3SecondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifiedContract(
      contractAddress: PromiseOrValue<string>,
      isVerified: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifiedContractFee(
      verifiedContractfee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWalletFactory(
      walletFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    versionPaymaster(overrides?: CallOverrides): Promise<string>;

    withdrawRelayHubDepositTo(
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetGeneralFee(uint256)"(generalFee?: null): SetGeneralFeeEventFilter;
    SetGeneralFee(generalFee?: null): SetGeneralFeeEventFilter;

    "SetSigner(address,address)"(
      signer?: null,
      owner?: null
    ): SetSignerEventFilter;
    SetSigner(signer?: null, owner?: null): SetSignerEventFilter;

    "SetVerifiedContractFee(uint256)"(
      verifiedContractfee?: null
    ): SetVerifiedContractFeeEventFilter;
    SetVerifiedContractFee(
      verifiedContractfee?: null
    ): SetVerifiedContractFeeEventFilter;

    "SetWalletFactory(address,address)"(
      walletFactory?: null,
      owner?: null
    ): SetWalletFactoryEventFilter;
    SetWalletFactory(
      walletFactory?: null,
      owner?: null
    ): SetWalletFactoryEventFilter;
  };

  estimateGas: {
    CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;

    POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDataSigner(overrides?: CallOverrides): Promise<BigNumber>;

    getGasAndDataLimits(overrides?: CallOverrides): Promise<BigNumber>;

    getQuote(
      factory: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelayHub(overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapParams(overrides?: CallOverrides): Promise<BigNumber>;

    getWalletFactory(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    postRelayedCall(
      context: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      gasUseWithoutPost: PromiseOrValue<BigNumberish>,
      relayData: GsnTypes.RelayDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    preRelayedCall(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: PromiseOrValue<BytesLike>,
      approvalData: PromiseOrValue<BytesLike>,
      maxPossibleGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlacklistedToken(
      token: PromiseOrValue<string>,
      isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDataSigner(
      dataSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGeneralFee(
      generalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRelayHub(
      hub: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUniswapParams(
      uniswapV3Factory: PromiseOrValue<string>,
      uniswapV3Fee: PromiseOrValue<BigNumberish>,
      weth: PromiseOrValue<string>,
      uniswapV3SecondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVerifiedContract(
      contractAddress: PromiseOrValue<string>,
      isVerified: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVerifiedContractFee(
      verifiedContractfee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWalletFactory(
      walletFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    versionPaymaster(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRelayHubDepositTo(
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CALLDATA_SIZE_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FORWARDER_HUB_OVERHEAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMASTER_ACCEPTANCE_BUDGET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POST_RELAYED_CALL_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRE_RELAYED_CALL_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDataSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGasAndDataLimits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuote(
      factory: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelayHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWalletFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postRelayedCall(
      context: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      gasUseWithoutPost: PromiseOrValue<BigNumberish>,
      relayData: GsnTypes.RelayDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    preRelayedCall(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: PromiseOrValue<BytesLike>,
      approvalData: PromiseOrValue<BytesLike>,
      maxPossibleGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlacklistedToken(
      token: PromiseOrValue<string>,
      isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDataSigner(
      dataSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGeneralFee(
      generalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRelayHub(
      hub: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUniswapParams(
      uniswapV3Factory: PromiseOrValue<string>,
      uniswapV3Fee: PromiseOrValue<BigNumberish>,
      weth: PromiseOrValue<string>,
      uniswapV3SecondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVerifiedContract(
      contractAddress: PromiseOrValue<string>,
      isVerified: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVerifiedContractFee(
      verifiedContractfee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWalletFactory(
      walletFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    versionPaymaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawRelayHubDepositTo(
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
